package com.lousseief.vault.modelimport com.lousseief.vault.service.FileServiceimport com.lousseief.vault.service.VaultServiceimport com.lousseief.vault.service.VerificationServiceimport com.lousseief.vault.exception.InternalExceptiondata class Settings(    var passwordLength: Int = 20,    var categories: MutableList<String> = mutableListOf())class Profile(    var name: String,    var passwordSalt: String,    var verificationSalt: String,    var verificationHash: String,    var encryptionScheme: String,    var paddingScheme: String,    var encryptionMode: String,    var iv: String,    var encryptedData: String,    var settings: Settings = Settings(),    var associations: MutableMap<String, Association> = mutableMapOf()) {    override    fun toString(): String =        "${passwordSalt}\n${verificationSalt}\n${verificationHash}\n${encryptionScheme}\n${paddingScheme}\n" +            "${encryptionMode}\n${iv}\n${encryptedData}"    fun updateAssociation(oldIdentifier: String, assoc: Association, password: String, newIdentifier: String = oldIdentifier) {        println("Before: " + encryptedData)        accessVault(            password,            { (settings, associations) ->                println(settings)                println(associations)                println(assoc)                println(oldIdentifier + " " +  newIdentifier)                val existingAssociation = associations[oldIdentifier]                if(existingAssociation === null)                    throw Exception("CRAZYS!")                if(oldIdentifier !== newIdentifier)                    associations.remove(oldIdentifier)                associations[newIdentifier] = existingAssociation.copy(association = assoc)                Pair(this.settings, associations)            },            true        )        println("After: " + encryptedData)    }    fun updateCredentials(identifier: String, credentials: List<Credential>, password: String) {        accessVault(            password,            { (settings, associations) ->                val existingAssociation = associations[identifier]                if(existingAssociation === null)                    throw Exception("CRAZYS!CREDS")                associations[identifier] = existingAssociation.copy(credentials = credentials)                Pair(settings, associations)            },            true)    }    fun remove(identifier: String, password: String) {        accessVault(            password,            { (settings, associations) ->                Pair(settings, associations.filterKeys { !it.equals(identifier) })            },            true)    }    fun add(identifier: String, password: String): Association {        val associationToAdd = Association(mainIdentifier = identifier)        println(encryptedData)        accessVault(            password,            { (settings, associations) ->                associations[identifier] = AssociationWithCredentials(association = associationToAdd)                Pair(settings, associations)            },            true        )        println(encryptedData)        return associationToAdd    }    fun accessVault(        password: String,        vaultManipulation: ((vault: Pair<Settings, MutableMap<String, AssociationWithCredentials>>) -> Pair<Settings, Map<String, AssociationWithCredentials>>)? = null,        encrypt: Boolean = false    )    :    Pair<Settings, Map<String, AssociationWithCredentials>> =        VerificationService.authorize(            password, passwordSalt, verificationHash, verificationSalt        )            .let {                VaultService.decryptVault(encryptedData, iv, it)                    .let { if (vaultManipulation !== null) vaultManipulation(it) else it }                    .let { vault ->                        if (encrypt) {                            val (nextIv, nextCipherText) = VaultService.encryptVault(it, vault)                            iv = nextIv                            encryptedData = nextCipherText                        }                        vault                    }            }    fun initialize(password: String) {        val (fetchedSettings, fetchedAssociationsWithCredentials) = accessVault(password)        settings = fetchedSettings        associations = fetchedAssociationsWithCredentials.mapValues { it.value.association }.toMutableMap()        println("Initialized: " + associations.toString())        println(settings.toString())        /*accessVault(password)            .also {(settings, associations) ->                this.settings = settings                this.associations = associations.mapValues { it.value.association }.toMutableMap()            }*/    }    fun getCredentials(identifier: String, password: String): List<Credential> {        val (_, fetchedAssociationsWithCredentials) = accessVault(password)        return fetchedAssociationsWithCredentials.getOrElse(            identifier,            { throw InternalException(InternalException.InternalExceptionCause.MISSING_IDENTIFIER) }        ).credentials    }    fun save() =        FileService.writeFile(this, true)}